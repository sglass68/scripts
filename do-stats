#!/usr/bin/python

import argparse
from collections import namedtuple
from contextlib import contextmanager
from datetime import date
import os
import subprocess
import sys
import unittest


testing = False

start = date.today()
ostart = start.toordinal() - start.weekday() - 1
if start.weekday() < 3:
   ostart -= 7
#ostart -= 7

#start_date = date.fromordinal(ostart).strftime("%Y-%m-%d")
start_date = '2017-09-01'

#end_date = date.fromordinal(ostart + 7).strftime("%Y-%m-%d")

#start_date = '2017-07-31'
#end_date = '2017-08-07'
#start_date = '2017-12-10'
#end_date = '2017-11-26'
end_date = None

Info = namedtuple('Info', ['count', 'query'])


def MakeKey(cmd):
    return ' '.join(cmd)

canned_output = {
    MakeKey(['cros_sdk', '--', 'gerrit', 'search',
             'status:merged owner:test after:2017-09-01']): [
        'https://chromium-review.googlesource.com/#/c/426759/ CR: 2 CQ: 0 V: 0 mosys              mosys: Correct excess elements warnings',
        'https://chromium-review.googlesource.com/#/c/641734/ CR: 0 CQ: 0 V: 0 chromiumos-overlay cros-firmware: Print an error when the bsc-overlay is not set',
        'https://chromium-review.googlesource.com/#/c/645908/ CR: 2 CQ: 0 V: 0 firmware           pack_firmware: Show the model name in the versions file',
        "https://chromium-review.googlesource.com/#/c/646994/ CR: 2 CQ: 0 V: 1 platform2          chromeos-config: Fix naming of 'reef' firmware node",
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', 'search',
             'status:merged reviewer:test -owner:test after:2017-09-01']): [
        'https://chromium-review.googlesource.com/#/c/468650/ CR: 2 CQ: 0 V: 0 mosys              mosys: display full memory part number',
        'https://chromium-review.googlesource.com/#/c/583727/ CR: 2 CQ: 0 V: 0 logitech-updater   Logitech firmware updater for PTZPro2',
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', '-i', 'search',
             'status:merged owner:test after:2017-09-01']): [
        'https://chrome-internal-review.googlesource.com/#/c/444532/m CR: 0 CQ: 0 V: 0 overlay-kahlee-private Drop unused firmware eclass variables',
        'https://chrome-internal-review.googlesource.com/#/c/444552/m CR: 0 CQ: 0 V: 0 overlay-coral-private  Drop unused firmware eclass variables',
        ],
    MakeKey(['cros_sdk', '--', 'gerrit', '-i', 'search',
             'status:merged reviewer:test -owner:test after:2017-09-01']): [
        'https://chrome-internal-review.googlesource.com/#/c/417539/ CR: 2 CQ: 0 V: 0 amd-firmware/stoney                   StoneyPI: Add stoney binaryPI',
        'https://chrome-internal-review.googlesource.com/#/c/417874/ CR: 0 CQ: 0 V: 0 chromeos-partner-overlay              amd-firmware: Add ebuild',
        'https://chrome-internal-review.googlesource.com/#/c/435714/ CR: 2 CQ: 1 V: 1 amd-firmware/raven                    Initial commit: RavenPI-FP5-AM4_1_0_0_0',
        ],
    MakeKey(['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q',
             'owner:test modified>2017/09/01 status:fixed']): [
        '- [chromium:821994](crbug.com/821994)[M66] [Reef] No Reef build after R66- 10440.0.0',
        '- [chromium:796983](crbug.com/796983)Implement YAML support in cros_config',
        '- [chromium:779438](crbug.com/779438)Implement BCS support in cros_config_host',
        '- [chromium:774498](crbug.com/774498)Small fix-ups Q4 2017',
        ],
    MakeKey(['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q',
             'reporter:test opened>2017/09/01']): [
        "- [chromium:821128](crbug.com/821128)Drop the 'parent' files in Coral / cros-model.eclass",
        '- [chromium:813442](crbug.com/813442)Drop cros_config_host_py',
        '- [chromium:796983](crbug.com/796983)Implement YAML support in cros_config',
        '- [chromium:779438](crbug.com/779438)Implement BCS support in cros_config_host',
        '- [chromium:774498](crbug.com/774498)Small fix-ups Q4 2017',
        ],
    MakeKey(['bugged', 'search', 'owner:test', 'modified>2017-09-01',
             'status:fixed']): [
        'issue     component  created   modified  reporter     assignee                                        priority  status  summary',
        '74733513  197583     20180314  20180315  shapiroc     hanwen                                          P1        FIXED   Chrome OS private overlays are no longer indexed',
        '72947182  191631     20180205  20180205  akillips     pleichtle                                       P3        FIXED   GSuite Contact Sales with < 20 employees should be ass',
        ],
    MakeKey(['bugged', 'search', 'r:test created>2017-09-01']): [
        'issue     component  created   modified  reporter  assignee        priority  status             summary',
        '74193661  46805      20180305  20180312  sjg       pedrosimonetti  P2        DUPLICATE          [feedback] Audio is skipping every ~7 seconds on my glinux workstations',
        '74108115  324720     20180302  20180302  sjg       mcolagrosso     P2        ASSIGNED           [Drive SWM FB] I like this better than the pictures. Wish it could hold a few more docs (say 10)?',
        ],
}


# Use this to suppress stdout/stderr output:
# with capture_sys_output() as (stdout, stderr)
#   ...do something...
@contextmanager
def capture_sys_output():
  capture_out, capture_err = StringIO(), StringIO()
  old_out, old_err = sys.stdout, sys.stderr
  try:
    sys.stdout, sys.stderr = capture_out, capture_err
    yield capture_out, capture_err
  finally:
    sys.stdout, sys.stderr = old_out, old_err


def TestCmd(cmd):
    key = MakeKey(cmd)
    result = canned_output.get(key)
    if not result:
        raise ValueError("Unknown key '%s'" % key)
    return result

def run_cmd(cmd, cros_sdk=False):
    if cros_sdk:
        cmd = ['cros_sdk', '--'] + cmd
    if testing:
        return TestCmd(cmd)
    lines = subprocess.check_output(cmd, stderr=subprocess.PIPE,
                                    shell=False).splitlines()
    print 'cmd %s, cros_sdk=%d' % (cmd, cros_sdk)
    print 'lines:'
    print '\n'.join(lines)
    print
    return lines

# Show some CLs
#  $1: Additional parameters for search, e.g. "owner:sjg"
def get_cls(terms, internal):
    terms="status:merged %s after:%s" % (' '.join(terms), start_date)
    if end_date:
        terms += ' before:%s' % end_date
    awk="""{cl=match($1, /\/([0-9]+)\/$/,m); cl=m[1]; printf("- [%s](%s) (%s):", cl, $1, $8); for (i=9; i<=NF; i++) printf(" %s", $i); print ""}"""
    #flags = '-i' if internal else ''
    #cmd = "cros_sdk -- gerrit %s search '%s' | ansi2txt | awk '%s' 2>/tmp/asc" % (flags, terms, awk)
    cmd = ['gerrit']
    if internal:
        cmd.append('-i')
    cmd += ['search', terms]
    #cmd = ['cros_sdk', '--', 'gerrit', 'search', terms, '|', 'ansi2txt', '|', 'awk', awk]
#print cmd
    lines = run_cmd(cmd, cros_sdk=True)
    return Info(len(lines), terms)
    #fred = 
    #print cmd

def do_chromium_cls(stats, user):
    for internal in (False, True):
        stats[internal]['submitted'] = get_cls(['owner:%s' % user], internal)
        stats[internal]['reviewed'] = get_cls(['reviewer:%s' % user, '-owner:%s' % user], internal)

def do_chromium_bugs(stats, user, slash_date):
    query = "owner:%s modified>%s status:fixed" % (user, slash_date)
    cmd = ['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q', query]
    lines = run_cmd(cmd)
    stats[False]['fixed'] = Info(len(lines), query)
    query = "reporter:%s opened>%s" % (user, slash_date)
    cmd = ['monorail', 'list', '--snippet', '-s', 'all', '-n', '10000', '-q', query]
    lines = run_cmd(cmd)
    stats[False]['opened'] = Info(len(lines), query)

def do_private_bugs(stats, user, start_date):
    query = "owner:%s modified>%s status:fixed" % (user, start_date)
    cmd = ['bugged', 'search', query]
    # The first line is a heading, so drop it
    lines = run_cmd(cmd)[1:]
    stats[True]['fixed'] = Info(len(lines), query)
    query = "r:%s created>%s" % (user, start_date)
    cmd = ['bugged', 'search', query]
    lines = run_cmd(cmd)[1:]
    stats[True]['opened'] = Info(len(lines), query)

def do_google3():
    print
    print
    cmd = 'g4d -f snippets'
    os.system(cmd)
    cmd = 'g4 sync; blaze run //ops/managedsystems/tools/autosnippet:autosnippet -- --week=-1 --pending_cls=false --markdown'
    os.system(cmd)

def GetClMessage(stats, name):
    private = stats[True][name].count
    public = stats[False][name].count
    items = []
    if private:
        items.append('[public](https://chromium-review.googlesource.com/q/%s)'
                     % stats[True][name].query.replace(' ', '+'))
    if public:
        items.append('[private](https://chrome-internal-review.googlesource.com/q/%s)'
                     % stats[False][name].query.replace(' ', '+'))
    msg = ', '.join(items)
    if msg:
        msg = ' (%s)' % msg
    return private + public, msg

def GetBugMessage(stats, name):
    private = stats[True][name].count
    public = stats[False][name].count
    items = []
    if private:
        items.append('[private](b/issues?q=%s)'
                     % stats[True][name].query.replace(' ', '%20'))
    if public:
        items.append('[public](https://bugs.chromium.org/p/chromium/issues/list?can=1&q=%s)'
                     % stats[False][name].query.replace(' ', '+'))
    msg = ', '.join(items)
    if msg:
        msg = ' (%s)' % msg
    return private + public, msg

def PrintStats(user):
  stats = {True: {}, False: {}}
  slash_date = start_date.replace('-', '/')
  do_chromium_cls(stats, user)
  total_submitted, msg_submitted = GetClMessage(stats, 'submitted')
  total_reviewed, msg_reviewed = GetClMessage(stats, 'reviewed')
  do_chromium_bugs(stats, user, slash_date)
  do_private_bugs(stats, user, start_date)
  print '%d CLs%s,' % (total_submitted, msg_submitted),
  print '%d reviewed%s,' % (total_reviewed, msg_reviewed),

  total_fixed, msg_fixed = GetBugMessage(stats, 'fixed')
  total_opened, msg_opened = GetBugMessage(stats, 'opened')
  print '%d bugs fixed%s,' % (total_fixed, msg_fixed),
  print '%d bugs opened%s' % (total_opened, msg_opened)


class TestElf(unittest.TestCase):
  def setUp(self):
    global testing
    testing = True

  def testOutput(self):
    PrintStats('test')


def Main(args):
  parser = argparse.ArgumentParser(description='Show stats for people')
  parser.add_argument('user', type=str, nargs='?', help='user name to look at')
  parser.add_argument('-t', '--test', action='store_true',
                      help='run unit tests')
  args = parser.parse_args(args)
  if args.test:
    sys.argv = [sys.argv[0]]
    unittest.main()
    return
  PrintStats('sjg')
    

if __name__ == '__main__':
  sys.exit(Main(sys.argv[1:]))
